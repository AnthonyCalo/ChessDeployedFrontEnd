{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\acalo\\\\Desktop\\\\devProjects\\\\ChessFrontDeploy\\\\src\\\\components\\\\ChessBoard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Modal } from 'react-bootstrap';\nimport GameModal from \"./Modal\";\nimport Square from \"./square\";\nimport gameRef from \"../game/legalmove\";\nimport MovingImage from \"./MovingImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar pieceType;\n\n(function (pieceType) {\n  pieceType[pieceType[\"PAWN\"] = 0] = \"PAWN\";\n  pieceType[pieceType[\"KNIGHT\"] = 1] = \"KNIGHT\";\n  pieceType[pieceType[\"BISHOP\"] = 2] = \"BISHOP\";\n  pieceType[pieceType[\"ROOK\"] = 3] = \"ROOK\";\n  pieceType[pieceType[\"QUEEN\"] = 4] = \"QUEEN\";\n  pieceType[pieceType[\"KING\"] = 5] = \"KING\";\n})(pieceType || (pieceType = {}));\n\nvar Color;\n\n(function (Color) {\n  Color[Color[\"WHITE\"] = 0] = \"WHITE\";\n  Color[Color[\"BLACK\"] = 1] = \"BLACK\";\n})(Color || (Color = {}));\n\nlet gameBeginAudio = new Audio(\"/sound/start.mp3\");\nlet moveSound = new Audio('/sound/move_sound.mp3');\nconst verticalAxis = [\"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nvar startingPieces = [];\n\nfunction create_start() {\n  const pieceArray = [];\n\n  for (var i = 0; i < 8; i++) {\n    pieceArray.push({\n      image: \"pieces/Wpawn.png\",\n      rank: \"2\",\n      file: horizontalAxis[i],\n      type: pieceType.PAWN,\n      color: Color.WHITE\n    });\n  }\n\n  for (i = 0; i < 8; i++) {\n    pieceArray.push({\n      image: \"pieces/Bpawn.png\",\n      rank: \"7\",\n      file: horizontalAxis[i],\n      type: pieceType.PAWN,\n      color: Color.BLACK\n    });\n  }\n\n  pieceArray.push({\n    image: \"pieces/Wrook.png\",\n    rank: \"1\",\n    file: \"a\",\n    type: pieceType.ROOK,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Wrook.png\",\n    rank: \"1\",\n    file: \"h\",\n    type: pieceType.ROOK,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Brook.png\",\n    rank: \"8\",\n    file: \"a\",\n    type: pieceType.ROOK,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Brook.png\",\n    rank: \"8\",\n    file: \"h\",\n    type: pieceType.ROOK,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Wknight.png\",\n    rank: \"1\",\n    file: \"b\",\n    type: pieceType.KNIGHT,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Wknight.png\",\n    rank: \"1\",\n    file: \"g\",\n    type: pieceType.KNIGHT,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Wbishop.png\",\n    rank: \"1\",\n    file: \"c\",\n    type: pieceType.BISHOP,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Wbishop.png\",\n    rank: \"1\",\n    file: \"f\",\n    type: pieceType.BISHOP,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Bknight.png\",\n    rank: \"8\",\n    file: \"b\",\n    type: pieceType.KNIGHT,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Bknight.png\",\n    rank: \"8\",\n    file: \"g\",\n    type: pieceType.KNIGHT,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Bbishop.png\",\n    rank: \"8\",\n    file: \"c\",\n    type: pieceType.BISHOP,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Bbishop.png\",\n    rank: \"8\",\n    file: \"f\",\n    type: pieceType.BISHOP,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Wqueen.png\",\n    rank: '1',\n    file: \"d\",\n    type: pieceType.QUEEN,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Wking.png\",\n    rank: '1',\n    file: \"e\",\n    type: pieceType.KING,\n    color: Color.WHITE\n  });\n  pieceArray.push({\n    image: \"pieces/Bqueen.png\",\n    rank: '8',\n    file: \"d\",\n    type: pieceType.QUEEN,\n    color: Color.BLACK\n  });\n  pieceArray.push({\n    image: \"pieces/Bking.png\",\n    rank: '8',\n    file: \"e\",\n    type: pieceType.KING,\n    color: Color.BLACK\n  });\n  return pieceArray;\n}\n\nstartingPieces = create_start();\nvar oldGamePosition = [];\n\nfunction ChessBoardMovesAlready(props) {\n  _s();\n\n  var boardHeight = parseFloat(getComputedStyle(document.documentElement).getPropertyValue(\"--board_height\"));\n  console.log(boardHeight, \"board hieght\");\n  var body = document.body,\n      html = document.documentElement;\n  var height = body.clientHeight;\n  var height_of_board = Math.round(height / (boardHeight / 100));\n  console.log(height_of_board);\n  const referee = new gameRef();\n  const [pieces, setPieces] = useState(startingPieces);\n  const [turn, setTurn] = useState(0);\n  const [userMovesEngine, setUME] = useState([]);\n  const [moveCount, setMoveCount] = useState(0);\n  const [takenPieces, setTaken] = useState([]); //props for modal\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  function closeModal() {\n    setModalOpen(false);\n  }\n\n  const movesList = props.movesList; //says whether or not user moved a piece\n  //important for setting board back to old position\n\n  const [playerMoves, setPM] = useState(false); //for after player moves set back turn\n\n  function setMove(moveNum) {\n    setMoveCount(moveNum);\n    props.setMove(moveNum);\n  } //passuser moves to the engine\n\n\n  useEffect(() => {\n    props.passToEngine(userMovesEngine);\n  });\n  useEffect(() => {\n    gameBeginAudio.play();\n    props.passToEngine([]);\n  }, []);\n  const boardRef = useRef(null);\n  let activePiece = null;\n\n  const grabPiece = function (event) {\n    const element = event.target; //const currSquare = element.parentNode.id;\n\n    const chessboard = boardRef.current;\n    console.log(chessboard);\n\n    if (chessboard) {\n      console.log(height_of_board / 8);\n      let currentRank = verticalAxis[Math.floor((event.clientY - (chessboard === null || chessboard === void 0 ? void 0 : chessboard.offsetTop)) / (height_of_board / 8))];\n      let currentFile = horizontalAxis[Math.floor((event.clientX - (chessboard === null || chessboard === void 0 ? void 0 : chessboard.offsetLeft)) / (height_of_board / 8))];\n      let currentPiece = pieces.find(p => p.file === currentFile && p.rank === currentRank);\n      console.log(currentRank, currentFile);\n\n      if (element.classList.contains(\"chess-piece\")) {\n        element.style.position = \"absolute\";\n        activePiece = element;\n      }\n    }\n  }; // const grabPiece = function(event: any){\n  //     const element = event.target;\n  //     //const currSquare = element.parentNode.id;\n  //     const chessboard = boardRef.current;\n  //     if (chessboard){\n  //         let currentRank = verticalAxis[Math.floor((event.clientY- chessboard?.offsetTop) / 94)];\n  //         let currentFile = horizontalAxis[Math.floor((event.clientX - chessboard?.offsetLeft) / 94)];\n  //         let currentPiece = pieces.find(p => p.file===currentFile && p.rank===currentRank);\n  //         if(element.classList.contains(\"chess-piece\")){\n  //             element.style.position=\"absolute\";\n  //             activePiece= element;\n  //         }\n  //     }\n  // }\n\n\n  function movePiece(event) {\n    const board = boardRef.current;\n\n    if (activePiece && board) {\n      const boardSideLeft = board.offsetLeft;\n      const boardTop = board.offsetTop;\n      const boardSideRight = boardSideLeft + board.clientWidth - 70;\n      const boardBottom = boardTop + board.clientHeight - 70;\n      activePiece.style.position = \"absolute\";\n      const x = event.clientX - 47;\n      const y = event.clientY - 47; //series of if else if keeps piece movement within boards area\n      //1st if else if is horizontally and second is vertically\n\n      if (x < boardSideLeft) {\n        activePiece.style.left = `${boardSideLeft}px`;\n      } else if (x > boardSideRight) {\n        activePiece.style.left = `${boardSideRight}px`;\n      } else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      if (y < boardTop) {\n        activePiece.style.top = `${boardTop}px`;\n      } else if (y > boardBottom) {\n        activePiece.style.top = `${boardBottom}px`;\n      } else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  function placePiece(event) {\n    const chessboard = boardRef.current;\n\n    if (playerMoves === false) {\n      setPM(true); //pushing each piece into a new piece Array\n      //it stores the games position before the player moves the pieces. Required to put pieces back\n      //newArray=pieces won't work beauase it will not be a pass by reference not pass by value\n\n      pieces.forEach(piece => {\n        const oldPiece = {\n          image: piece.image,\n          rank: piece.rank,\n          file: piece.file,\n          type: piece.type,\n          color: piece.color\n        };\n        oldGamePosition.push(oldPiece);\n      });\n    }\n\n    var validMove = false; //needed to check if a move is okay\n\n    if (chessboard) {\n      var _activePiece;\n\n      var newRank = verticalAxis[Math.floor((event.clientY - (chessboard === null || chessboard === void 0 ? void 0 : chessboard.offsetTop)) / (height_of_board / 8))]; //this gets the new square based on where I release the mouse\n\n      var newFile = horizontalAxis[Math.floor((event.clientX - (chessboard === null || chessboard === void 0 ? void 0 : chessboard.offsetLeft)) / (height_of_board / 8))];\n      var newSquare = newFile + newRank;\n      console.log(\"NEW SQUARE\", newSquare);\n      const parent = (_activePiece = activePiece) === null || _activePiece === void 0 ? void 0 : _activePiece.parentElement; //needed to get original square. Need square to find the original piece on square\n\n      var currentPiece = pieces.find(p => p.file === (parent === null || parent === void 0 ? void 0 : parent.id[0]) && p.rank === parent.id[1]); //var rightTurn = currentPiece?.color===turn; //checks if players turn\n\n      var attackedPiece = pieces.find(p => p.file === newFile && p.rank === newRank);\n\n      if (currentPiece) {\n        validMove = referee.isValidMove(parent === null || parent === void 0 ? void 0 : parent.id, newSquare, currentPiece === null || currentPiece === void 0 ? void 0 : currentPiece.type, currentPiece === null || currentPiece === void 0 ? void 0 : currentPiece.color, pieces);\n      }\n\n      if ((currentPiece === null || currentPiece === void 0 ? void 0 : currentPiece.type) === 5 && validMove) {\n        if (newSquare === \"g1\" && validMove) {\n          castle(\"WK\");\n          setTurn(turn === 0 ? 1 : 0);\n        } else if (newSquare === \"c1\" && validMove) {\n          castle(\"WQ\");\n          setTurn(turn === 0 ? 1 : 0);\n        } else if (newSquare === \"g8\" && validMove) {\n          castle(\"BK\");\n          setTurn(turn === 0 ? 1 : 0);\n        } else if (newSquare === \"c8\" && validMove) {\n          castle(\"BQ\");\n          setTurn(turn === 0 ? 1 : 0);\n        }\n      }\n\n      if (attackedPiece && validMove) {\n        //console.log(\"here attacking\")\n        const attackSquare = (attackedPiece === null || attackedPiece === void 0 ? void 0 : attackedPiece.file) + attackedPiece.rank;\n        setPieces(value => {\n          const piecesMinusOne = value.reduce((results, piece) => {\n            const pieceSquare = piece.file + piece.rank;\n\n            if (pieceSquare !== attackSquare) {\n              results.push(piece);\n            }\n\n            return results;\n          }, []);\n          moveSound.play();\n          return piecesMinusOne;\n        });\n      }\n\n      setPieces(prev => {\n        const pieces = prev.map(selectPiece => {\n          var _activePiece2;\n\n          const parent = (_activePiece2 = activePiece) === null || _activePiece2 === void 0 ? void 0 : _activePiece2.parentElement;\n\n          if (validMove && parent && selectPiece.file === parent.id[0] && selectPiece.rank === parent.id[1]) {\n            var moveEngine = parent.id + newSquare;\n            setUME([...userMovesEngine, moveEngine]); //if the moves valid take the piece on current parent square\n            //then give that piece a new rank/ file\n\n            selectPiece.rank = newRank;\n            selectPiece.file = newFile;\n            setTurn(turn === 0 ? 1 : 0);\n          } else {\n            var _activePiece3, _activePiece4;\n\n            (_activePiece3 = activePiece) === null || _activePiece3 === void 0 ? void 0 : _activePiece3.style.removeProperty(\"top\");\n            (_activePiece4 = activePiece) === null || _activePiece4 === void 0 ? void 0 : _activePiece4.style.removeProperty(\"left\");\n          }\n\n          moveSound.play();\n          return selectPiece;\n        });\n        activePiece = null;\n        return pieces;\n      });\n    }\n  } //Castle function basically moves two pieces the rook and king\n  //has to be a seperate function than normal one piece move functin\n\n\n  function castle(newSquare) {\n    let oldKingSquare = \"\";\n    let newKingSquare = \"\";\n    let oldRookSquare = \"\";\n    let newRookSquare = \"\";\n\n    if (newSquare === \"WK\") {\n      oldKingSquare = \"e1\";\n      newKingSquare = \"g1\";\n      oldRookSquare = \"h1\";\n      newRookSquare = \"f1\";\n    } else if (newSquare === \"BK\") {\n      oldKingSquare = \"e8\";\n      newKingSquare = \"g8\";\n      oldRookSquare = \"h8\";\n      newRookSquare = \"f8\";\n    } else if (newSquare === \"BQ\") {\n      oldKingSquare = \"e8\";\n      newKingSquare = \"c8\";\n      oldRookSquare = \"a8\";\n      newRookSquare = \"d8\";\n    } else if (newSquare === \"WQ\") {\n      oldKingSquare = \"e1\";\n      newKingSquare = \"c1\";\n      oldRookSquare = \"a1\";\n      newRookSquare = \"d1\";\n    }\n\n    setPieces(prev => {\n      const pieces = prev.map(selectPiece => {\n        if (selectPiece.file === oldKingSquare[0] && selectPiece.rank === oldKingSquare[1]) {\n          selectPiece.rank = newKingSquare[1];\n          selectPiece.file = newKingSquare[0];\n        } else if (selectPiece.file === oldRookSquare[0] && selectPiece.rank === oldRookSquare[1]) {\n          selectPiece.rank = newRookSquare[1];\n          selectPiece.file = newRookSquare[0];\n        }\n\n        return selectPiece;\n      });\n      return pieces;\n    });\n  }\n\n  function castleBack(newSquare) {\n    let oldKingSquare = \"\";\n    let newKingSquare = \"\";\n    let oldRookSquare = \"\";\n    let newRookSquare = \"\";\n\n    if (newSquare === \"WK\") {\n      oldKingSquare = \"g1\";\n      newKingSquare = \"e1\";\n      oldRookSquare = \"f1\";\n      newRookSquare = \"h1\";\n    } else if (newSquare === \"BK\") {\n      oldKingSquare = \"g8\";\n      newKingSquare = \"e8\";\n      oldRookSquare = \"f8\";\n      newRookSquare = \"h8\";\n    } else if (newSquare === \"BQ\") {\n      oldKingSquare = \"c8\";\n      newKingSquare = \"e8\";\n      oldRookSquare = \"d8\";\n      newRookSquare = \"a8\";\n    } else if (newSquare === \"WQ\") {\n      oldKingSquare = \"c1\";\n      newKingSquare = \"e1\";\n      oldRookSquare = \"d1\";\n      newRookSquare = \"a1\";\n    }\n\n    setPieces(prev => {\n      const pieces = prev.map(selectPiece => {\n        //castle 1st if moves the king and second moves rook\n        if (selectPiece.file === oldKingSquare[0] && selectPiece.rank === oldKingSquare[1]) {\n          selectPiece.rank = newKingSquare[1];\n          selectPiece.file = newKingSquare[0];\n        } else if (selectPiece.file === oldRookSquare[0] && selectPiece.rank === oldRookSquare[1]) {\n          selectPiece.rank = newRookSquare[1];\n          selectPiece.file = newRookSquare[0];\n        }\n\n        return selectPiece;\n      });\n      return pieces;\n    });\n  } //called with movewithAn(imation) function below\n\n\n  function createAnPiece(imgUrl, oldTop, oldLeft, newTop, newLeft) {\n    const animatedPiece = new MovingImage(imgUrl, oldTop, oldLeft, newTop, newLeft);\n    let lastTime = 0;\n    let pieceExists = true;\n\n    function update(time) {\n      if (lastTime != null && pieceExists === true) {\n        const delta = time - lastTime;\n        animatedPiece.update(delta);\n      }\n\n      lastTime = time;\n      window.requestAnimationFrame(update);\n    }\n\n    if (pieceExists) {\n      window.requestAnimationFrame(update);\n    }\n\n    setTimeout(() => {\n      pieceExists = false;\n    }, 300);\n  }\n\n  function moveBackWithAn() {\n    // if(moveCount<1){\n    //     return\n    // }\n    const move = movesList[moveCount - 1];\n\n    if (!move) {\n      return;\n    }\n\n    if (move[0] == \"castle\") {\n      let m1, m2;\n\n      if (move[1] === \"WK\") {\n        m1 = [\"e1\", \"g1\"];\n        m2 = [\"h1\", \"f1\"];\n      } else if (move[1] == \"WQ\") {\n        m1 = [\"e1\", \"c1\"];\n        m2 = [\"a1\", \"d1\"];\n      } else if (move[1] == \"BK\") {\n        m1 = [\"e8\", \"g8\"];\n        m2 = [\"h8\", \"f8\"];\n      } else {\n        m1 = [\"e8\", \"c8\"];\n        m2 = [\"a8\", \"d8\"];\n      }\n\n      getAnimationInfo(m1, \"backward\");\n      getAnimationInfo(m2, \"backward\");\n    } else {\n      getAnimationInfo(move, \"backward\");\n    }\n\n    setTimeout(() => {\n      movePieceBack();\n    }, 300);\n  }\n\n  function getAnimationInfo(move, direction = \"forward\") {\n    let beforeSquare;\n    let newSquare;\n\n    if (direction === \"backward\" && move) {\n      const newid = move[0][0] + move[0][1];\n      const id = move[1][0] + move[1][1];\n      beforeSquare = document.getElementById(id);\n      newSquare = document.getElementById(newid);\n    } else if (direction == \"forward\" && move) {\n      const id = move[0][0] + move[0][1];\n      const newid = move[1][0] + move[1][1];\n      beforeSquare = document.getElementById(id);\n      newSquare = document.getElementById(newid);\n    }\n\n    if (beforeSquare && newSquare) {\n      var _getComputedStyle;\n\n      //console.log(getComputedStyle(beforeSquare).getPropertyValue(\"position\"));\n      //square location for animation function\n      var rect = beforeSquare.getBoundingClientRect();\n      var newRect = newSquare.getBoundingClientRect();\n\n      if (!beforeSquare.getElementsByClassName(\"chess-piece\")[0]) {\n        return;\n      } //gets image url from intial square. Need for createAnPiece function\n\n\n      let imgURL = (_getComputedStyle = getComputedStyle(beforeSquare.getElementsByClassName(\"chess-piece\")[0])) === null || _getComputedStyle === void 0 ? void 0 : _getComputedStyle.getPropertyValue(\"background-image\"); //this basically hides the current square so that the piece isn't shown twice during movement\n\n      let befMove = beforeSquare.getElementsByClassName(\"chess-piece\")[0];\n      befMove.classList.add(\"hideBg\");\n      imgURL = imgURL.replace(/^url\\([\"']?/, '').replace(/[\"']?\\)$/, ''); //console.log(imgURL)\n\n      createAnPiece(imgURL, rect.y, rect.x, newRect.y, newRect.x);\n    }\n  }\n\n  function moveWithAn(move) {\n    //move with animation calls the animation of piece\n    //waits for animation time: then call move piece game function where react\n    //will update stae to re-render pieces on correct square\n    if (!move) {\n      return;\n    }\n\n    setMove(moveCount + 1);\n    setTimeout(() => {\n      movePieceGame(move);\n    }, 300);\n\n    if (move[0] == \"castle\") {\n      let m1, m2;\n\n      if (move[1] === \"WK\") {\n        m1 = [\"e1\", \"g1\"];\n        m2 = [\"h1\", \"f1\"];\n      } else if (move[1] == \"WQ\") {\n        m1 = [\"e1\", \"c1\"];\n        m2 = [\"a1\", \"d1\"];\n      } else if (move[1] == \"BK\") {\n        m1 = [\"e8\", \"g8\"];\n        m2 = [\"h8\", \"f8\"];\n      } else {\n        m1 = [\"e8\", \"c8\"];\n        m2 = [\"a8\", \"d8\"];\n      }\n\n      getAnimationInfo(m1);\n      getAnimationInfo(m2);\n    } else {\n      getAnimationInfo(move);\n    }\n  }\n\n  function movePieceGame(move) {\n    //set pieces to old game position from saved oldGamePosition variable\n    if (playerMoves) {\n      setPieces(oldGamePosition);\n      setPM(false);\n      oldGamePosition = [];\n      setUME([]);\n    }\n\n    moveSound.play(); //if(movesList[moveCount+1][0]===\"gameOver\"){\n\n    if (move[0] === \"gameOver\") {\n      //end of game. BeforeEnd shows this is the end game modal\n      setModalOpen(true);\n    } else if (move[0] === \"castle\") {\n      castle(move[1]);\n      setTurn(turn === 0 ? 1 : 0);\n    } else {\n      //regular move not castle or game over\n      const chessboard = boardRef.current;\n\n      if (chessboard) {\n        var attackedPiece = pieces.find(p => p.file === move[1][0] && p.rank === move[1][1]); //moveAnimation(move[0], newSquare);\n\n        if (attackedPiece) {\n          //console.log(\"here attacking\")\n          var taken = {\n            piece: attackedPiece,\n            moveNumber: moveCount\n          };\n          setTaken(prev => {\n            return [...prev, taken];\n          });\n          const attackSquare = (attackedPiece === null || attackedPiece === void 0 ? void 0 : attackedPiece.file) + attackedPiece.rank;\n          setPieces(value => {\n            const piecesMinusOne = value.reduce((results, piece) => {\n              const pieceSquare = piece.file + piece.rank;\n\n              if (pieceSquare !== attackSquare) {\n                results.push(piece);\n              }\n\n              return results;\n            }, []);\n            return piecesMinusOne;\n          });\n        }\n\n        setPieces(prev => {\n          const pieces = prev.map(selectPiece => {\n            if (selectPiece.file === move[0][0] && selectPiece.rank === move[0][1]) {\n              if (selectPiece.type == 0 && (move[1][1] == '8' && selectPiece.color == 0 || move[1][1] === '1' && selectPiece.color == 1)) {\n                selectPiece.type = 4;\n                selectPiece.image = \"pieces/Bqueen.png\";\n              }\n\n              selectPiece.rank = move[1][1];\n              selectPiece.file = move[1][0];\n              setTurn(turn === 0 ? 1 : 0);\n            }\n\n            return selectPiece;\n          });\n          return pieces;\n        });\n      }\n    } //else close. else meaning it isn't a castle move\n\n  } //movePieceGame close\n  //called with backbutton moves back a game move\n\n\n  function setbackMove() {\n    if (moveCount < 1) {\n      return;\n    }\n\n    setMove(moveCount - 1); // setTimeout(function(){\n    // },200);\n  }\n\n  function movePieceBack() {\n    const move = movesList[moveCount - 1];\n    const chessboard = boardRef.current;\n    moveSound.play(); //first checks if user moved pieces from game.\n    //same as move forward function\n\n    if (playerMoves) {\n      setPieces(oldGamePosition);\n      setUME([]);\n      setPM(false);\n      oldGamePosition = [];\n    } //set the move count back to do the opposite move\n    //function is almost the same as forward function but new and old squares flipped\n\n\n    if (move[0] === \"castle\") {\n      castleBack(move[1]);\n      setTurn(turn === 0 ? 1 : 0);\n    } else {\n      //not reverting a castle or going back from 0. normal  back move    \n      if (chessboard) {\n        setPieces(prev => {\n          const pieces = prev.map(selectPiece => {\n            if (selectPiece.file === move[1][0] && selectPiece.rank === move[1][1]) {\n              selectPiece.rank = move[0][1];\n              selectPiece.file = move[0][0];\n              setTurn(turn === 0 ? 1 : 0);\n            }\n\n            return selectPiece;\n          });\n          return pieces;\n        });\n        var tookPiece = takenPieces.find(take => take.moveNumber === moveCount - 1);\n\n        if (tookPiece) {\n          setPieces(prev => {\n            return [...prev, tookPiece === null || tookPiece === void 0 ? void 0 : tookPiece.piece];\n          });\n        }\n      }\n    }\n  }\n\n  let board = [];\n  let counter = 0; //nested loop to create board w/ black/white squares\n  //j is x and i is Y\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      if (j === 0) {\n        counter++;\n      }\n\n      let position = horizontalAxis[j] + verticalAxis[i];\n      let image = \"\";\n      pieces.forEach(function (piece) {\n        //if a pieces position is equal to a square pass that piece into square creation\n        //image is either \"\" blank or has the URL of a piece.image\n        if (piece.file === position[0] && piece.rank === position[1]) {\n          image = piece.image; //return;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Square, {\n        number: counter,\n        image: image,\n        sText: position\n      }, position, false, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 24\n      }, this));\n      counter++;\n    } //ends second for loop\n\n  } //ends first for loop\n  // this function resets the board to starting position and sets move to 0.\n  //it's called by the movedisplay component. It .clicks a hidden button \n\n\n  const resetBoard = () => {\n    const starting = create_start();\n    gameBeginAudio.play();\n    setPieces(starting);\n    setMove(0);\n    setPM(false);\n    setUME([]);\n  }; //putting pieces in the squares\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boardDiv\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chessBoard\",\n        onMouseMove: event => movePiece(event),\n        onMouseDown: event => grabPiece(event),\n        onMouseUp: event => placePiece(event),\n        ref: boardRef,\n        children: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 657,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"belowButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"backBtn\",\n        className: \"backBtn moveBtn\",\n        onClick: () => {\n          setbackMove();\n          moveBackWithAn();\n        },\n        children: \"Move back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"boardReset\",\n        className: \"moveBtn\",\n        onClick: () => resetBoard(),\n        children: \"Reset Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"nextBtn\",\n        className: \"nextBtn moveBtn\",\n        onClick: () => {\n          moveWithAn(movesList[moveCount]);\n        },\n        children: \"Next Move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalOpen,\n      size: \"lg\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      centered: true,\n      children: /*#__PURE__*/_jsxDEV(GameModal, {\n        closeModal: setModalOpen,\n        text: props.gameover\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n} //closes chessboard\n\n\n_s(ChessBoardMovesAlready, \"a7IIbRwQgHp9CXPrhbA1oLS9PGk=\");\n\n_c = ChessBoardMovesAlready;\nexport default ChessBoardMovesAlready;\nexport { pieceType, Color };\n\nvar _c;\n\n$RefreshReg$(_c, \"ChessBoardMovesAlready\");","map":{"version":3,"sources":["C:/Users/acalo/Desktop/devProjects/ChessFrontDeploy/src/components/ChessBoard.tsx"],"names":["React","useState","useEffect","useRef","Modal","GameModal","Square","gameRef","MovingImage","pieceType","Color","gameBeginAudio","Audio","moveSound","verticalAxis","horizontalAxis","startingPieces","create_start","pieceArray","i","push","image","rank","file","type","PAWN","color","WHITE","BLACK","ROOK","KNIGHT","BISHOP","QUEEN","KING","oldGamePosition","ChessBoardMovesAlready","props","boardHeight","parseFloat","getComputedStyle","document","documentElement","getPropertyValue","console","log","body","html","height","clientHeight","height_of_board","Math","round","referee","pieces","setPieces","turn","setTurn","userMovesEngine","setUME","moveCount","setMoveCount","takenPieces","setTaken","modalOpen","setModalOpen","closeModal","movesList","playerMoves","setPM","setMove","moveNum","passToEngine","play","boardRef","activePiece","grabPiece","event","element","target","chessboard","current","currentRank","floor","clientY","offsetTop","currentFile","clientX","offsetLeft","currentPiece","find","p","classList","contains","style","position","movePiece","board","boardSideLeft","boardTop","boardSideRight","clientWidth","boardBottom","x","y","left","top","placePiece","forEach","piece","oldPiece","validMove","newRank","newFile","newSquare","parent","parentElement","id","attackedPiece","isValidMove","castle","attackSquare","value","piecesMinusOne","reduce","results","pieceSquare","prev","map","selectPiece","moveEngine","removeProperty","oldKingSquare","newKingSquare","oldRookSquare","newRookSquare","castleBack","createAnPiece","imgUrl","oldTop","oldLeft","newTop","newLeft","animatedPiece","lastTime","pieceExists","update","time","delta","window","requestAnimationFrame","setTimeout","moveBackWithAn","move","m1","m2","getAnimationInfo","movePieceBack","direction","beforeSquare","newid","getElementById","rect","getBoundingClientRect","newRect","getElementsByClassName","imgURL","befMove","add","replace","moveWithAn","movePieceGame","taken","moveNumber","setbackMove","tookPiece","take","counter","j","resetBoard","starting","gameover"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport { Modal} from 'react-bootstrap';\r\nimport GameModal from \"./Modal\";\r\nimport Square from \"./square\";\r\nimport gameRef from \"../game/legalmove\";\r\nimport MovingImage from \"./MovingImage\";\r\n\r\nenum pieceType {\r\n    PAWN,\r\n    KNIGHT,\r\n    BISHOP,\r\n    ROOK,\r\n    QUEEN,\r\n    KING    \r\n}\r\n\r\nenum Color{\r\n    WHITE,\r\n    BLACK\r\n}\r\n\r\ninterface Piece{\r\n    image: string\r\n    rank: string\r\n    file: string\r\n    type: pieceType\r\n    color: Color\r\n}\r\n\r\ninterface TakenPiece{\r\n    piece: any\r\n    moveNumber: number\r\n}\r\n\r\nlet gameBeginAudio = new Audio(\"/sound/start.mp3\");\r\nlet moveSound = new Audio('/sound/move_sound.mp3')\r\n\r\nconst verticalAxis = [\"8\",\"7\",\"6\",\"5\",\"4\", \"3\",\"2\",\"1\"]\r\nconst horizontalAxis = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]\r\n\r\nvar startingPieces: Piece[] = []\r\n\r\nfunction create_start(){\r\n    const pieceArray: Piece[]=[]\r\n    for(var i=0; i<8; i++){\r\n        pieceArray.push({image: \"pieces/Wpawn.png\", rank: \"2\", file: horizontalAxis[i], type: pieceType.PAWN, color: Color.WHITE});\r\n    }\r\n    for(i=0; i<8; i++){\r\n        pieceArray.push({image: \"pieces/Bpawn.png\", rank: \"7\", file: horizontalAxis[i], type: pieceType.PAWN, color: Color.BLACK});\r\n    }\r\n    \r\n    pieceArray.push({image: \"pieces/Wrook.png\", rank: \"1\", file: \"a\", type: pieceType.ROOK, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Wrook.png\", rank: \"1\", file: \"h\", type: pieceType.ROOK, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Brook.png\", rank: \"8\", file: \"a\", type: pieceType.ROOK, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Brook.png\", rank: \"8\", file: \"h\", type: pieceType.ROOK, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Wknight.png\", rank: \"1\", file: \"b\", type: pieceType.KNIGHT, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Wknight.png\", rank: \"1\", file: \"g\", type: pieceType.KNIGHT, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Wbishop.png\", rank: \"1\", file: \"c\", type: pieceType.BISHOP, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Wbishop.png\", rank: \"1\", file: \"f\", type: pieceType.BISHOP, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Bknight.png\", rank: \"8\", file: \"b\", type: pieceType.KNIGHT, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Bknight.png\", rank: \"8\", file: \"g\", type: pieceType.KNIGHT, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Bbishop.png\", rank: \"8\", file: \"c\", type: pieceType.BISHOP, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Bbishop.png\", rank: \"8\", file: \"f\", type: pieceType.BISHOP, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Wqueen.png\", rank: '1', file: \"d\", type: pieceType.QUEEN, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Wking.png\", rank: '1', file: \"e\", type: pieceType.KING, color: Color.WHITE});\r\n    pieceArray.push({image: \"pieces/Bqueen.png\", rank: '8', file: \"d\", type: pieceType.QUEEN, color: Color.BLACK});\r\n    pieceArray.push({image: \"pieces/Bking.png\", rank: '8', file: \"e\", type: pieceType.KING, color: Color.BLACK});\r\n    \r\n    return pieceArray;\r\n}\r\nstartingPieces= create_start();\r\n\r\nvar oldGamePosition: Piece[] = [];\r\nfunction ChessBoardMovesAlready(props: any){\r\n    var boardHeight = parseFloat(getComputedStyle(document.documentElement).getPropertyValue(\"--board_height\"))\r\n    console.log(boardHeight, \"board hieght\")\r\n    var body = document.body,\r\n    html = document.documentElement;\r\n    var height = body.clientHeight;\r\n    var height_of_board =Math.round(height / (boardHeight/100));\r\n    console.log(height_of_board)\r\n    const referee = new gameRef();\r\n    const [pieces, setPieces] = useState<Piece[]>(startingPieces); \r\n    const [turn, setTurn] = useState(0);\r\n    const [userMovesEngine, setUME] = useState<String[]>([])\r\n    const [moveCount, setMoveCount] = useState(0);\r\n    const [takenPieces, setTaken]=useState<TakenPiece[]>([]);\r\n    //props for modal\r\n    const [modalOpen, setModalOpen] =useState(false);\r\n\r\n    function closeModal(){\r\n        setModalOpen(false)\r\n    }\r\n    const movesList = props.movesList\r\n    //says whether or not user moved a piece\r\n    //important for setting board back to old position\r\n    const [playerMoves, setPM] = useState(false);\r\n    //for after player moves set back turn\r\n\r\n    function setMove(moveNum: any){\r\n        setMoveCount(moveNum);\r\n        props.setMove(moveNum);\r\n    }\r\n    //passuser moves to the engine\r\n    useEffect(()=>{\r\n        props.passToEngine(userMovesEngine);\r\n    }, );\r\n    useEffect(()=>{\r\n        gameBeginAudio.play();\r\n        props.passToEngine([]);\r\n    }, [])\r\n    \r\n    const boardRef = useRef<HTMLDivElement>(null);\r\n\r\n    let activePiece: HTMLElement | null = null;\r\n\r\n    const grabPiece = function(event: any){\r\n        const element = event.target;\r\n        //const currSquare = element.parentNode.id;\r\n        const chessboard = boardRef.current;\r\n        console.log(chessboard)\r\n        if (chessboard){\r\n            console.log((height_of_board/8))\r\n            let currentRank = verticalAxis[(Math.floor((event.clientY- chessboard?.offsetTop) / (height_of_board/8)))];\r\n            let currentFile = horizontalAxis[(Math.floor((event.clientX - chessboard?.offsetLeft) / (height_of_board/8)))];\r\n            let currentPiece = pieces.find(p => p.file===currentFile && p.rank===currentRank);\r\n            console.log(currentRank, currentFile)\r\n            if(element.classList.contains(\"chess-piece\")){\r\n                element.style.position=\"absolute\";\r\n                activePiece= element;\r\n            }\r\n        }\r\n    }\r\n\r\n    // const grabPiece = function(event: any){\r\n    //     const element = event.target;\r\n    //     //const currSquare = element.parentNode.id;\r\n    //     const chessboard = boardRef.current;\r\n    //     if (chessboard){\r\n    //         let currentRank = verticalAxis[Math.floor((event.clientY- chessboard?.offsetTop) / 94)];\r\n    //         let currentFile = horizontalAxis[Math.floor((event.clientX - chessboard?.offsetLeft) / 94)];\r\n    //         let currentPiece = pieces.find(p => p.file===currentFile && p.rank===currentRank);\r\n    //         if(element.classList.contains(\"chess-piece\")){\r\n    //             element.style.position=\"absolute\";\r\n    //             activePiece= element;\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    function movePiece(event: any){\r\n        const board = boardRef.current;\r\n        if(activePiece && board){\r\n            const boardSideLeft= board.offsetLeft;\r\n            const boardTop= board.offsetTop;\r\n            const boardSideRight = boardSideLeft + board.clientWidth-70;\r\n            const boardBottom =boardTop + board.clientHeight - 70;\r\n            activePiece.style.position=\"absolute\";\r\n            const  x = event.clientX -47;\r\n            const  y = event.clientY-47;\r\n            //series of if else if keeps piece movement within boards area\r\n            //1st if else if is horizontally and second is vertically\r\n            if( x<boardSideLeft){    \r\n                activePiece.style.left = `${boardSideLeft}px`;\r\n            }else if(x>boardSideRight){\r\n                activePiece.style.left=`${boardSideRight}px`;\r\n            }else{\r\n                activePiece.style.left=`${x}px`;\r\n            }\r\n\r\n            if( y<boardTop){    \r\n                activePiece.style.top = `${boardTop}px`;\r\n            }else if(y>boardBottom){\r\n                activePiece.style.top=`${boardBottom}px`;\r\n            }else{\r\n                activePiece.style.top=`${y}px`;\r\n            }\r\n        }\r\n    }\r\n    function placePiece(event: any){\r\n            const chessboard=boardRef.current;\r\n            \r\n            if(playerMoves===false){\r\n                setPM(true);\r\n                //pushing each piece into a new piece Array\r\n                //it stores the games position before the player moves the pieces. Required to put pieces back\r\n                //newArray=pieces won't work beauase it will not be a pass by reference not pass by value\r\n                pieces.forEach((piece)=>{\r\n                    const oldPiece: Piece = {\r\n                        image: piece.image,\r\n                        rank: piece.rank,\r\n                        file:piece.file,\r\n                        type:piece.type,\r\n                        color:piece.color}\r\n                    oldGamePosition.push(oldPiece);\r\n                })\r\n                \r\n            }\r\n            var validMove = false; //needed to check if a move is okay\r\n\r\n\r\n            \r\n            if(chessboard){\r\n                var newRank = verticalAxis[(Math.floor((event.clientY- chessboard?.offsetTop) / (height_of_board/8)))];  //this gets the new square based on where I release the mouse\r\n                var newFile = horizontalAxis[(Math.floor((event.clientX - chessboard?.offsetLeft) / (height_of_board/8)))];\r\n                var newSquare = newFile + newRank;\r\n\r\n                console.log(\"NEW SQUARE\", newSquare)\r\n\r\n                const parent=activePiece?.parentElement//needed to get original square. Need square to find the original piece on square\r\n                var currentPiece=pieces.find(p=> (p.file===parent?.id[0] && p.rank===parent.id[1]));\r\n                //var rightTurn = currentPiece?.color===turn; //checks if players turn\r\n\r\n                \r\n                var attackedPiece = pieces.find(p => p.file===newFile && p.rank===newRank);\r\n                if(currentPiece){\r\n                    validMove = referee.isValidMove(parent?.id, newSquare, currentPiece?.type, currentPiece?.color, pieces);\r\n                }\r\n                if(currentPiece?.type===5 && validMove){\r\n                    if(newSquare===\"g1\" && validMove ){\r\n                        castle(\"WK\");\r\n                        setTurn(turn===0?1:0);\r\n\r\n                    }else if(newSquare===\"c1\" && validMove){\r\n                        castle(\"WQ\");\r\n                        setTurn(turn===0?1:0);\r\n\r\n                    }else if(newSquare===\"g8\" && validMove){\r\n                        castle(\"BK\");\r\n                        setTurn(turn===0?1:0);\r\n\r\n                    }else if(newSquare===\"c8\" && validMove){\r\n                        castle(\"BQ\");\r\n                        setTurn(turn===0?1:0);\r\n\r\n                    }\r\n                }\r\n                if(attackedPiece && validMove){\r\n                    //console.log(\"here attacking\")\r\n                    const attackSquare = attackedPiece?.file + attackedPiece.rank;\r\n                    setPieces((value)=>{        \r\n                        const piecesMinusOne = value.reduce((results, piece)=>{\r\n                            const pieceSquare=piece.file + piece.rank;\r\n                            \r\n                            if(pieceSquare!==attackSquare){\r\n                                results.push(piece)\r\n                            }\r\n                            return results\r\n                        }, []as Piece[]);\r\n                        moveSound.play();\r\n\r\n                        return piecesMinusOne;\r\n                    })  \r\n                }\r\n                setPieces((prev)=>{\r\n                    const pieces=prev.map((selectPiece)=>{\r\n                        const parent=activePiece?.parentElement\r\n                        if(validMove && parent&& selectPiece.file===parent.id[0] && selectPiece.rank===parent.id[1]){\r\n                            var moveEngine = parent.id + newSquare;\r\n                            setUME([...userMovesEngine, moveEngine]);\r\n                            //if the moves valid take the piece on current parent square\r\n                            //then give that piece a new rank/ file\r\n                            selectPiece.rank=newRank;\r\n                            selectPiece.file=newFile;\r\n                            setTurn(turn===0?1:0);\r\n                        }else{\r\n                            activePiece?.style.removeProperty(\"top\");\r\n                            activePiece?.style.removeProperty(\"left\");\r\n                            }\r\n                        moveSound.play();\r\n                        return selectPiece;\r\n                    })\r\n                    activePiece=null;\r\n                    return pieces;\r\n                }\r\n                )\r\n               \r\n            \r\n        }\r\n        }\r\n    //Castle function basically moves two pieces the rook and king\r\n    //has to be a seperate function than normal one piece move functin\r\n    function castle(newSquare: string){\r\n        let oldKingSquare =\"\";\r\n        let newKingSquare=\"\";\r\n        let oldRookSquare=\"\";\r\n        let newRookSquare=\"\";\r\n        if(newSquare===\"WK\"){\r\n            oldKingSquare=\"e1\";\r\n            newKingSquare=\"g1\";\r\n            oldRookSquare=\"h1\";\r\n            newRookSquare=\"f1\";\r\n        }else if(newSquare===\"BK\"){\r\n            oldKingSquare=\"e8\";\r\n            newKingSquare=\"g8\";\r\n            oldRookSquare=\"h8\";\r\n            newRookSquare=\"f8\";\r\n        }else if(newSquare===\"BQ\"){\r\n            oldKingSquare=\"e8\";\r\n            newKingSquare=\"c8\";\r\n            oldRookSquare=\"a8\";\r\n            newRookSquare=\"d8\";\r\n        }else if(newSquare===\"WQ\"){\r\n            oldKingSquare=\"e1\";\r\n            newKingSquare=\"c1\";\r\n            oldRookSquare=\"a1\";\r\n            newRookSquare=\"d1\";\r\n        }\r\n        setPieces((prev)=>{\r\n            const pieces=prev.map((selectPiece)=>{\r\n                if(selectPiece.file===oldKingSquare[0] && selectPiece.rank===oldKingSquare[1]){\r\n                    selectPiece.rank=newKingSquare[1];\r\n                    selectPiece.file=newKingSquare[0];\r\n                }else if(selectPiece.file===oldRookSquare[0] && selectPiece.rank===oldRookSquare[1]){\r\n                    selectPiece.rank=newRookSquare[1];\r\n                    selectPiece.file=newRookSquare[0];\r\n                }\r\n                return selectPiece;\r\n            })\r\n            return pieces;\r\n        }\r\n        )\r\n    }\r\n    function castleBack(newSquare: string){\r\n        let oldKingSquare =\"\";\r\n        let newKingSquare=\"\";\r\n        let oldRookSquare=\"\";\r\n        let newRookSquare=\"\"; \r\n        if(newSquare===\"WK\"){\r\n            oldKingSquare=\"g1\";\r\n            newKingSquare=\"e1\";\r\n            oldRookSquare=\"f1\";\r\n            newRookSquare=\"h1\";\r\n        }else if(newSquare===\"BK\"){\r\n            oldKingSquare=\"g8\";\r\n            newKingSquare=\"e8\";\r\n            oldRookSquare=\"f8\";\r\n            newRookSquare=\"h8\";\r\n        }else if(newSquare===\"BQ\"){\r\n            oldKingSquare=\"c8\";\r\n            newKingSquare=\"e8\";\r\n            oldRookSquare=\"d8\";\r\n            newRookSquare=\"a8\";\r\n        }else if(newSquare===\"WQ\"){\r\n            oldKingSquare=\"c1\";\r\n            newKingSquare=\"e1\";\r\n            oldRookSquare=\"d1\";\r\n            newRookSquare=\"a1\";\r\n        }\r\n        setPieces((prev)=>{\r\n            const pieces=prev.map((selectPiece)=>{\r\n                //castle 1st if moves the king and second moves rook\r\n                if(selectPiece.file===oldKingSquare[0] && selectPiece.rank===oldKingSquare[1]){\r\n                    selectPiece.rank=newKingSquare[1];\r\n                    selectPiece.file=newKingSquare[0];\r\n                }else if(selectPiece.file===oldRookSquare[0] && selectPiece.rank===oldRookSquare[1]){\r\n                    selectPiece.rank=newRookSquare[1];\r\n                    selectPiece.file=newRookSquare[0];\r\n                }\r\n                return selectPiece;\r\n            })\r\n            return pieces;\r\n        }\r\n        )\r\n        \r\n    } \r\n\r\n    //called with movewithAn(imation) function below\r\n    function createAnPiece(imgUrl, oldTop, oldLeft, newTop, newLeft){\r\n        const animatedPiece = new MovingImage(imgUrl, oldTop, oldLeft, newTop, newLeft)\r\n        let lastTime=0\r\n        let pieceExists=true\r\n        function update(time){\r\n            if(lastTime!=null && pieceExists===true){\r\n                const delta=time-lastTime\r\n                animatedPiece.update(delta)\r\n\r\n            }\r\n            lastTime=time\r\n            window.requestAnimationFrame(update)\r\n\r\n        }\r\n        if(pieceExists){\r\n            window.requestAnimationFrame(update)\r\n        }\r\n        setTimeout(()=>{\r\n            pieceExists=false;\r\n        }, 300)\r\n    }\r\n    function moveBackWithAn(){\r\n        // if(moveCount<1){\r\n        //     return\r\n        // }\r\n        const move = movesList[moveCount-1]\r\n        if(!move){\r\n            return\r\n        }\r\n        if(move[0]==\"castle\"){\r\n            let m1, m2;\r\n            if(move[1]===\"WK\"){\r\n                m1 = [\"e1\", \"g1\"]\r\n                m2 = [\"h1\", \"f1\"]\r\n            }else if(move[1]==\"WQ\"){\r\n                m1 = [\"e1\", \"c1\"]\r\n                m2 = [\"a1\", \"d1\"]\r\n            }else if(move[1]==\"BK\"){\r\n                m1 = [\"e8\", \"g8\"]\r\n                m2 = [\"h8\", \"f8\"]\r\n            }else{\r\n                m1 = [\"e8\", \"c8\"]\r\n                m2 = [\"a8\", \"d8\"]\r\n            }\r\n            getAnimationInfo(m1, \"backward\")\r\n            getAnimationInfo(m2, \"backward\")\r\n        }else{\r\n            getAnimationInfo(move, \"backward\")\r\n        }\r\n        setTimeout(()=>{\r\n            movePieceBack()\r\n            \r\n        }, 300)\r\n    }\r\n    function getAnimationInfo(move:any, direction:String=\"forward\"){\r\n        let beforeSquare: any;\r\n        let newSquare: any;\r\n        if( direction===\"backward\"  && move){\r\n            const newid= move[0][0] + move[0][1]\r\n            const id=move[1][0] + move[1][1]\r\n            beforeSquare = document.getElementById(id)\r\n            newSquare= document.getElementById(newid)\r\n        }else if(direction==\"forward\" && move){\r\n            const id= move[0][0] + move[0][1]\r\n            const newid=move[1][0] + move[1][1]\r\n            beforeSquare = document.getElementById(id)\r\n            newSquare= document.getElementById(newid)\r\n        }\r\n\r\n        if(beforeSquare && newSquare){\r\n            //console.log(getComputedStyle(beforeSquare).getPropertyValue(\"position\"));\r\n            //square location for animation function\r\n            var rect = beforeSquare.getBoundingClientRect();\r\n            var newRect= newSquare.getBoundingClientRect();\r\n            if(!beforeSquare.getElementsByClassName(\"chess-piece\")[0]){\r\n                return\r\n            }\r\n            //gets image url from intial square. Need for createAnPiece function\r\n            let imgURL=getComputedStyle(beforeSquare.getElementsByClassName(\"chess-piece\")[0])?.getPropertyValue(\"background-image\")\r\n            //this basically hides the current square so that the piece isn't shown twice during movement\r\n            let befMove= beforeSquare.getElementsByClassName(\"chess-piece\")[0]\r\n            befMove.classList.add(\"hideBg\")\r\n            imgURL = imgURL.replace(/^url\\([\"']?/, '').replace(/[\"']?\\)$/, '')\r\n            //console.log(imgURL)\r\n            createAnPiece(imgURL, rect.y, rect.x, newRect.y, newRect.x);\r\n\r\n        }\r\n    }\r\n    function moveWithAn(move: any){\r\n    //move with animation calls the animation of piece\r\n    //waits for animation time: then call move piece game function where react\r\n    //will update stae to re-render pieces on correct square\r\n        if(!move){\r\n            return\r\n        }\r\n        setMove(moveCount+1);            \r\n        \r\n        setTimeout(()=>{\r\n            movePieceGame(move)\r\n  \r\n        }, 300)\r\n        if(move[0]==\"castle\"){\r\n            let m1, m2;\r\n            if(move[1]===\"WK\"){\r\n                m1 = [\"e1\", \"g1\"]\r\n                m2 = [\"h1\", \"f1\"]\r\n            }else if(move[1]==\"WQ\"){\r\n                m1 = [\"e1\", \"c1\"]\r\n                m2 = [\"a1\", \"d1\"]\r\n            }else if(move[1]==\"BK\"){\r\n                m1 = [\"e8\", \"g8\"]\r\n                m2 = [\"h8\", \"f8\"]\r\n            }else{\r\n                m1 = [\"e8\", \"c8\"]\r\n                m2 = [\"a8\", \"d8\"]\r\n            }\r\n            getAnimationInfo(m1)\r\n            getAnimationInfo(m2)\r\n        }else{\r\n            getAnimationInfo(move)\r\n        }\r\n    }\r\n\r\n    function movePieceGame(move: any){\r\n        //set pieces to old game position from saved oldGamePosition variable\r\n        if(playerMoves){\r\n            setPieces(oldGamePosition);\r\n            setPM(false);\r\n            oldGamePosition=[];\r\n            setUME([]);\r\n        }\r\n        moveSound.play()\r\n        //if(movesList[moveCount+1][0]===\"gameOver\"){\r\n\r\n        if(move[0]===\"gameOver\"){\r\n            //end of game. BeforeEnd shows this is the end game modal\r\n            setModalOpen(true);\r\n\r\n        }else if(move[0]===\"castle\"){\r\n            castle(move[1]);\r\n            setTurn(turn===0?1:0);\r\n        }else{\r\n            //regular move not castle or game over\r\n            const chessboard=boardRef.current;\r\n            \r\n            if(chessboard){                \r\n                \r\n                var attackedPiece = pieces.find(p => p.file===move[1][0] && p.rank===move[1][1]);\r\n\r\n                //moveAnimation(move[0], newSquare);\r\n                if(attackedPiece){\r\n                    //console.log(\"here attacking\")\r\n                    var taken:TakenPiece={piece: attackedPiece, moveNumber: moveCount}\r\n                    setTaken(prev=>{\r\n                        return [...prev, taken]\r\n                    });\r\n                    const attackSquare = attackedPiece?.file + attackedPiece.rank;\r\n\r\n                    setPieces((value)=>{        \r\n                        const piecesMinusOne = value.reduce((results, piece)=>{\r\n                            const pieceSquare=piece.file + piece.rank;\r\n                            \r\n                            if(pieceSquare!==attackSquare){\r\n                                results.push(piece)\r\n                            }\r\n                            return results\r\n                        }, []as Piece[]);\r\n                        return piecesMinusOne;\r\n                    })                    \r\n                }\r\n                setPieces((prev)=>{\r\n                    const pieces=prev.map((selectPiece)=>{\r\n                        if(selectPiece.file===move[0][0] && selectPiece.rank===move[0][1]){\r\n                            if(selectPiece.type==0 && ((move[1][1]=='8' && selectPiece.color==0) || (move[1][1]==='1' && selectPiece.color==1))){\r\n                                selectPiece.type=4;\r\n                                selectPiece.image=(\"pieces/Bqueen.png\")\r\n                            }\r\n\r\n                            selectPiece.rank=move[1][1];\r\n                            selectPiece.file=move[1][0];\r\n                            setTurn(turn===0?1:0);\r\n                        }\r\n                        return selectPiece;\r\n                    })\r\n                    return pieces;\r\n                }\r\n                )\r\n            }\r\n        }//else close. else meaning it isn't a castle move\r\n    \r\n    }//movePieceGame close\r\n    //called with backbutton moves back a game move\r\n    function setbackMove(){\r\n        if(moveCount<1){\r\n            return\r\n        }\r\n        setMove(moveCount-1);\r\n        // setTimeout(function(){\r\n        // },200);\r\n    }\r\n    function movePieceBack(){\r\n        const move = movesList[moveCount-1];\r\n        const chessboard=boardRef.current;\r\n        moveSound.play();\r\n        //first checks if user moved pieces from game.\r\n        //same as move forward function\r\n        if(playerMoves){\r\n            setPieces(oldGamePosition);\r\n            setUME([]);\r\n            setPM(false);\r\n            oldGamePosition=[];\r\n        } \r\n        //set the move count back to do the opposite move\r\n        //function is almost the same as forward function but new and old squares flipped\r\n        if(move[0]===\"castle\"){\r\n            castleBack(move[1]);\r\n            setTurn(turn===0?1:0);\r\n\r\n        }else{\r\n            //not reverting a castle or going back from 0. normal  back move    \r\n            if(chessboard){\r\n                setPieces((prev)=>{\r\n                    const pieces=prev.map((selectPiece)=>{\r\n                        if(selectPiece.file===move[1][0] && selectPiece.rank===move[1][1]){\r\n                            selectPiece.rank=move[0][1];\r\n                            selectPiece.file=move[0][0];\r\n                            setTurn(turn===0?1:0);\r\n                        }\r\n                        return selectPiece;\r\n                    })\r\n                    return pieces;\r\n                }\r\n                )\r\n                var tookPiece= takenPieces.find(take=>(take.moveNumber===moveCount-1));\r\n                if (tookPiece){\r\n                    setPieces((prev)=>{\r\n                        return [...prev, tookPiece?.piece];\r\n                    })\r\n                }  \r\n            }      \r\n    }\r\n        }\r\n    \r\n    let board: any=[];\r\n    let counter=0;\r\n    //nested loop to create board w/ black/white squares\r\n    //j is x and i is Y\r\n    \r\n    for(var i=0; i<8; i++){\r\n        for(var j=0; j<8; j++){\r\n            if(j===0){\r\n                counter++;\r\n            }\r\n            let position = horizontalAxis[j] + verticalAxis[i]; \r\n\r\n            let image=\"\";\r\n            pieces.forEach(function(piece){\r\n                //if a pieces position is equal to a square pass that piece into square creation\r\n                //image is either \"\" blank or has the URL of a piece.image\r\n                if(piece.file===position[0] && piece.rank===position[1]){\r\n                    image=piece.image;\r\n                    //return;\r\n                }\r\n            })\r\n            board.push(<Square key={position} number={counter} image={image} sText={position} />);\r\n            counter++;      \r\n        }//ends second for loop\r\n    }//ends first for loop\r\n\r\n    // this function resets the board to starting position and sets move to 0.\r\n    //it's called by the movedisplay component. It .clicks a hidden button \r\n    const resetBoard=()=>{\r\n        const starting = create_start()\r\n        gameBeginAudio.play();\r\n        setPieces(starting)\r\n        setMove(0)\r\n        setPM(false)\r\n        setUME([])\r\n    }\r\n\r\n\r\n    //putting pieces in the squares\r\n\r\n\r\n    \r\n    return(\r\n        <>\r\n        <div className=\"boardDiv\">\r\n        {/* <MoveButton color={buttonClass()} turn={moveTurn}/> */}\r\n\r\n\r\n        <div className=\"chessBoard\"\r\n            onMouseMove={event => movePiece(event)}\r\n            onMouseDown={event => grabPiece(event)}\r\n            onMouseUp={event => placePiece(event)}\r\n            ref={boardRef}>\r\n            {board}\r\n        </div>      \r\n        </div>\r\n        {/* KChad to use arrow function because onclick won't work with type void */}\r\n        <div className=\"belowButtons\">\r\n        <button id=\"backBtn\" className=\"backBtn moveBtn\" onClick={()=>{setbackMove(); moveBackWithAn()}}>Move back</button>\r\n        <button id=\"boardReset\" className=\"moveBtn\" onClick={()=>resetBoard()}>Reset Board</button>\r\n        <button id=\"nextBtn\" className=\"nextBtn moveBtn\" onClick={()=>{moveWithAn(movesList[moveCount])}}>Next Move</button>\r\n        </div>\r\n        <Modal \r\n            show={modalOpen}\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n        >\r\n            <GameModal closeModal={setModalOpen} text={props.gameover}/>\r\n        </Modal>\r\n        </>\r\n        )\r\n\r\n}//closes chessboard\r\n\r\nexport default ChessBoardMovesAlready;\r\n\r\nexport {pieceType, Color};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}